# OPENCVE DOCKER COMPOSE
---
name: opencve
x-airflow-common: &airflow-common
  build:
    context: ../scheduler
    dockerfile: Dockerfile
  # env_file:
  #   - .env
  volumes:
    - ../scheduler/dags/:/opt/airflow/dags
    - ../scheduler/airflow.cfg:/opt/airflow/airflow.cfg:ro
    - repositories:/home/airflow/repositories/
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - opencve

services:
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: on-failure
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - opencve
      - reverse_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse_proxy"

      - "traefik.http.routers.airflow.rule=Host(`airflow.cyberrabbit.it`)"
      - "traefik.http.routers.airflow.service=airflow"
      - "traefik.http.routers.airflow.entrypoints=tls"
      - "traefik.http.routers.airflow.tls=true"

      - "traefik.http.routers.airflow.middlewares=compresstraefik,airflow-securityheaders"

      - "traefik.http.services.airflow.loadbalancer.server.scheme=http"
      - "traefik.http.services.airflow.loadbalancer.server.port=8080"
      - "traefik.http.services.airflow.loadbalancer.passhostheader=true"

      - "traefik.http.middlewares.airflow-securityheaders.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.airflow-securityheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.airflow-securityheaders.headers.stsPreload=true"
      - "traefik.http.middlewares.compresstraefik.compress=true"


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: on-failure
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - opencve

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: on-failure
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - opencve

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - exec /entrypoint airflow version
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    networks:
      - opencve

  webserver:
    env_file:
      - .env
    build:
      context: ../web/
      args:
        - OPENCVE_REPOSITORY=${OPENCVE_REPOSITORY}
        - OPENCVE_VERSION=${OPENCVE_VERSION}
        - GUNICORN_CMD_ARGS=${GUNICORN_CMD_ARGS}
      dockerfile: Dockerfile
    volumes:
      - ../web/opencve/conf/.env:/app/opencve/web/opencve/conf/.env:ro
      - ../web/opencve/conf/settings.py:/app/opencve/web/opencve/conf/settings.py:ro
      - repositories:/app/repositories/:ro
      - staticfiles:/app/static/
    restart: on-failure
    networks:
      - opencve

  nginx:
    image: nginx:bookworm
    # ports:
    #    - "${OPENCVE_PORT:-80}:80"
    volumes:
      - ./conf/opencve.conf.template:/etc/nginx/templates/opencve.conf.template:ro
      - ./conf/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - staticfiles:/var/www/opencve/static/:ro
    restart: on-failure
    networks:
      - opencve
      - reverse_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse_proxy"

      - "traefik.http.routers.opencve.rule=Host(`opencve.cyberrabbit.it`)"
      - "traefik.http.routers.opencve.service=opencve"
      - "traefik.http.routers.opencve.entrypoints=tls"
      - "traefik.http.routers.opencve.tls=true"

      - "traefik.http.routers.opencve.middlewares=compresstraefik,opencve-securityheaders"

      - "traefik.http.services.opencve.loadbalancer.server.scheme=http"
      - "traefik.http.services.opencve.loadbalancer.server.port=80"
      - "traefik.http.services.opencve.loadbalancer.passhostheader=true"

      - "traefik.http.middlewares.opencve-securityheaders.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.opencve-securityheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.opencve-securityheaders.headers.stsPreload=true"
      - "traefik.http.middlewares.compresstraefik.compress=true"

  redis:
    image: redis/redis-stack:latest
    healthcheck:
       test: ["CMD", "redis-cli", "ping"]
       interval: 10s
       retries: 5
       start_period: 5s
    restart: on-failure
    networks:
      - opencve

  postgres:
    image: postgres:${POSTGRES_VERSION:-15}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-opencve}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-opencve}
      POSTGRES_DB: opencve
      PGDATA: /var/lib/postgreqsql/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      retries: 5
      start_period: 5s
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - postgres-db:/var/lib/postgreqsql/data
    networks:
      - opencve

networks:
  opencve:
  reverse_proxy:
    name: reverse_proxy
    external: true

volumes:
    postgres-db:
      driver: local
      driver_opts:
        type: none
        device: ${POSTGRES_PATH}
        o: bind
    staticfiles:
      driver: local
      driver_opts:
        type: none
        device: ${STATIC_PATH}
        o: bind
    repositories:
      driver: local
      driver_opts:
        type: none
        device: ${REPOSITORIES_PATH}
        o: bind
